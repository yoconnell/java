package staticFieldAndMethod;


public class Button {
    static String mode = "LIGHT";
    static void switchMode(){
        mode = mode.equals("LIGHT")?"DARK":"LIGHT";
    }

    char print;
    int space;

    public Button(char print, int space) {
        this.print = print;
        this.space = space;
    }

    void place(){
        System.out.printf("print %c, space : %d , mode : %s%n",
                print,space,mode);
    }

//1. **정적 필드 및 메서드**:
//   - `mode`: 이 정적 필드는 버튼의 모드(LIGHT 또는 DARK)를 나타내는 문자열입니다.
//   - `switchMode()`: 이 정적 메서드는 `mode`를 토글하여 LIGHT 모드와 DARK 모드 간 전환을 수행합니다.
//
//2. **인스턴스 필드**:
//   - `print`: 문자를 저장하는 필드로, 각 버튼 인스턴스에 대해 고유한 값을 가집니다.
//   - `space`: 정수를 저장하는 필드로, 각 버튼 인스턴스에 대해 고유한 값을 가집니다.
//
//3. **생성자**:
//   - `Button(char print, int space)`: 이 생성자는 `print`와 `space` 매개변수를 받아 버튼 인스턴스의 초기화를 수행합니다.
//
//4. **인스턴스 메서드**:
//   - `place()`: 이 메서드는 버튼의 정보를 출력합니다. 현재의 `print`, `space`, 및 `mode` 값을 포맷하여 출력합니다.
//
// `mode`는 정적 필드로서 모든 버튼 인스턴스가 공유하며, 각 버튼은 `print` 및 `space`와 같은 고유한 상태를 가집니다.

//나의 의문점  :
//"나" 라는 인스턴스와 너라는 인스턴스가 있다면 불을 내가 끄면 "너" 라는 인스턴스의 불도 꺼지는 거겠네?

//답:
// 인스턴스는 각자 고유한 데이터를 가지며 동작합니다.
// Button 클래스의 mode 필드는 정적(static) 필드로 클래스 수준에서 공유되므로 모든 인스턴스가 동일한 mode 값을 공유합니다.
// 하지만 print 및 space는 인스턴스 필드로, 각 인스턴스에 대해 고유한 값을 가집니다.
// 따라서 "나라는 인스턴스"가 mode를 변경하면 "너라는 인스턴스"의 mode는 변경되지만,
// "나라는 인스턴스"의 print 및 space 값은 "너라는 인스턴스"에 영향을 주지 않습니다.
// 인스턴스 간의 독립성은 객체 지향 프로그래밍의 기본 개념 중 하나로, 각 인스턴스는 자체 고유한 데이터와 상태를 유지하며 다른 인스턴스와 독립적으로 작동합니다.

//추가질문 : 그렇다면 나 라는 인스턴스가 불을 끄는 모드를 해두었다면  너라는 인스턴스는 어느 장소를 부여받아도 불이 꺼져있겟네?

//답:맞습니다, 인스턴스의 정적(static) 필드인 mode는 모든 인스턴스에서 공유되는 값입니다.
// 따라서 "나라는 인스턴스"가 모드를 변경하면 "너라는 인스턴스"나 다른 모든 인스턴스에 영향을 미칠 것입니다.
// 이는 정적 필드가 클래스 수준에서 공유되기 때문입니다.
//예를 들어, "나라는 인스턴스"가 모드를 "DARK"로 변경하면 "너라는 인스턴스"의 모드 또한 "DARK"가 될 것입니다.
// 이렇게 정적 필드는 모든 인스턴스 간에 상태를 공유하므로 조심해서 사용해야 합니다.
//만약 각 인스턴스마다 고유한 모드를 가지려면 mode 필드를 인스턴스 필드로 변경하고 각 인스턴스의 생성자에서 초기화해야 합니다.
// 이렇게 하면 각 인스턴스가 독립적으로 모드를 설정할 수 있게 됩니다.

}
